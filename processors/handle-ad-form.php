<?php

require_once '../config/functions.php';
require_once '../config/FileHandler.php';

print_r($_POST);
class HandleAdForm extends  Functions
{

    private $title , $ad_id, $description , $link , $contact , $campaign, $location ,  $ad_type , $units ,
        $email , $total_amount , $action , $ad_rate , $upload_image = false , $file_handler , $user_id;

    public function __construct()
    {
        global  $file_handler;
        parent::__construct();
        $this->file_handler = $file_handler;
    }


    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }


    private function  generateAdID () : string {
        global  $website_details;
        $ad_id = $this->generateID($website_details->AD_ID_LENGTH);
        if($this->record_exists_in_table($this->users_table_name , "ad_id" , $ad_id)) $this->generateAdId();
        return $ad_id;
    }

    private function  generateLinkShortUrl () : string
    {
        global  $website_details;
        $short_link = $this->generateID($website_details->LinkShortUrlLength);
        if($this->record_exists_in_table($this->users_table_name , "link_short_url" , $short_link)) $this->generateAdId();
        return $short_link;
    }

    private function isReady () : bool
    {
        return !empty($_POST) && isset($_POST['action']);
    }

    private function setDetails () : bool
    {

        $this->title = $this->escape_string($_POST['title']);
        $this->description = $this->escape_string($_POST['description']);
        $this->link = $this->escape_string($_POST['link']);
        $this->contact = $this->escape_string($_POST['contact']);
        $this->campaign = $this->escape_string($_POST['campaign']);
        $this->location = $this->escape_string($_POST['location']);
        $this->upload_image = $_POST['UPLOAD_IMAGE'];
        $this->action = $_POST['action'];
        $this->email = $_POST['email'];
        $this->ad_id = $_POST['ad_id'] || $this->generateAdID();
        $this->user_id = $this->fetch_data_from_table($this->users_table_name , 'email' , $this->email)[0]['user_id'];

        if($this->action != 'NEW_AD') return true;

        $this->ad_type = $_POST['ad_type'];
        $this->ad_rate = $_POST['ad_rate'];
        $this->total_amount = $_POST['total_amount'];
        $this->units = $_POST['units'];


        return true;


    }


    private function insertNewAdToDataBase () : bool
    {
        $bannerExtension = $this->file_handler->getExtension($_FILES['banner']['name']);
        $bannerImage = $this->ad_id.$bannerExtension;
        $ad_type_paid_for = "";

        switch ($this->ad_type)
        {
            case 'ppv':
                $ad_type_paid_for = "number_of_views_paid_for";
                break;
            case 'ppc':
                $ad_type_paid_for = 'number_of_clicks_paid_for';
                break;
            case 'ppa':
                $ad_type_paid_for = 'number_of_affiliates_paid_for';
                break;
        }

        $data_fields_and_values = [
            'title' => $this->title,
            'link' => $this->link,
            'description' => $this->description,
            'image' => $bannerImage,
            'ad_type' => $this->ad_type ,
            'balance' => $this->total_amount ,
            'amount_paid' => $this->total_amount ,
            $ad_type_paid_for => $this->units,
            'ad_id' => $this->ad_id,
            'posted_by' => $this->user_id,




        ];

        //$this->insert_into_table($this->ads_table_name , );
    }

    private function uploadAdImage() : bool {


    }



    public  function postNewAd (){




        }












}

?>