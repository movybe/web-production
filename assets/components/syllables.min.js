'use strict';

var ones = [/^[^aeiou]?ion/, /^[^aeiou]?ised/, /^[^aeiou]?iled/, /[aeiou][n][gt]$/, /\wa[gt]e$/];
var all_spaces = / /g;
var ends_with_vowel = /[aeiouy]$/;
var starts_with_e_then_specials = /^e[sm]/;
var starts_with_e = /^e/;
var ends_with_noisy_vowel_combos = /(eo|eu|ia|oa|ua|ui)$/i;
var starts_with_single_vowel_combos = /^(eu)/i;
var aiouy = /[aiouy]/;
var ends_with_ee = /ee$/;
var whitespace_dash = /\s\-/;
var starts_with_consonant_vowel = /^[^aeiouy][h]?[aeiouy]/;
var joining_consonant_vowel = /^[^aeiou][e]([^d]|$)/;
var cvcv_same_consonant = /^([^aeiouy])[aeiouy]\1[aeiouy]/;
var cvcv_same_vowel = /^[^aeiouy]([aeiouy])[^aeiouy]\1/;
var cvcv_known_consonants = /^([tg][aeiouy]){2}/;
var only_one_or_more_c = /^[^aeiouy]+$/;

function postprocess(arr) {
  arr = arr.map(function (w) {
    return w.trim();
  });
  arr = arr.filter(function (w) {
    return w !== '';
  });
  var l = arr.length;

  if (l > 1) {
    var suffix = arr[l - 2] + arr[l - 1];

    for (var i = 0; i < ones.length; i++) {
      if (suffix.match(ones[i])) {
        arr[l - 2] = arr[l - 2] + arr[l - 1];
        arr.pop();
      }
    }
  }

  if (arr.length > 1) {
    var first_is_open = (arr[0].length === 1 || arr[0].match(starts_with_consonant_vowel)) && arr[0].match(ends_with_vowel);
    var second_is_joining = arr[1].match(joining_consonant_vowel);

    if (first_is_open && second_is_joining) {
      var possible_combination = arr[0] + arr[1];
      var probably_separate_syllables = possible_combination.match(cvcv_same_consonant) || possible_combination.match(cvcv_same_vowel) || possible_combination.match(cvcv_known_consonants);

      if (!probably_separate_syllables) {
        arr[0] = arr[0] + arr[1];
        arr.splice(1, 1);
      }
    }
  }

  if (arr.length > 1) {
    var second_to_last_is_open = arr[arr.length - 2].match(starts_with_consonant_vowel) && arr[arr.length - 2].match(ends_with_vowel);
    var last_is_joining = arr[arr.length - 1].match(joining_consonant_vowel) && ones.every(function (re) {
      return !arr[arr.length - 1].match(re);
    });

    if (second_to_last_is_open && last_is_joining) {
      var _possible_combination = arr[arr.length - 2] + arr[arr.length - 1];

      var _probably_separate_syllables = _possible_combination.match(cvcv_same_consonant) || _possible_combination.match(cvcv_same_vowel) || _possible_combination.match(cvcv_known_consonants);

      if (!_probably_separate_syllables) {
        arr[arr.length - 2] = arr[arr.length - 2] + arr[arr.length - 1];
        arr.splice(arr.length - 1, 1);
      }
    }
  }

  if (arr.length > 1) {
    var single = arr[0] + arr[1];

    if (single.match(starts_with_single_vowel_combos)) {
      arr[0] = single;
      arr.splice(1, 1);
    }
  }

  if (arr.length > 1) {
    if (arr[arr.length - 1].match(only_one_or_more_c)) {
      arr[arr.length - 2] = arr[arr.length - 2] + arr[arr.length - 1];
      arr.splice(arr.length - 1, 1);
    }
  }

  return arr;
}

var syllables = function syllables(str) {
  var all = [];

  if (str.match(' ')) {
    return str.split(all_spaces).map(function (s) {
      return syllables(s);
    });
  }

  var doer = function doer(w) {
    var vow = /[aeiouy]$/;
    var chars = w.split('');
    var before = '';
    var after = '';
    var current = '';

    for (var i = 0; i < chars.length; i++) {
      before = chars.slice(0, i).join('');
      current = chars[i];
      after = chars.slice(i + 1, chars.length).join('');
      var candidate = before + chars[i];

      if (before.match(ends_with_vowel) && !current.match(ends_with_vowel)) {
        if (after.match(starts_with_e_then_specials)) {
          candidate += 'e';
          after = after.replace(starts_with_e, '');
        }

        all.push(candidate);
        return doer(after);
      }

      if (candidate.match(ends_with_noisy_vowel_combos)) {
        all.push(before);
        all.push(current);
        return doer(after);
      }

      if (candidate.match(ends_with_vowel) && after.match(starts_with_consonant_vowel)) {
        all.push(candidate);
        return doer(after);
      }
    }

    if (str.match(aiouy) || str.match(ends_with_ee)) {
      all.push(w);
    } else {
      all[all.length - 1] = (all[all.length - 1] || '') + w;
    }

    return null;
  };

  str.split(whitespace_dash).forEach(function (s) {
    doer(s);
  });
  all = postprocess(all);

  if (all.length === 0) {
    all = [str];
  }

  all = all.filter(function (s) {
    return s !== '' && s !== null && s !== undefined;
  });
  return all;
};