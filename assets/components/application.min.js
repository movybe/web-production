"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Application = function (_React$Component) {
  _inherits(Application, _React$Component);

  function Application() {
    var _this;

    _classCallCheck(this, Application);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Application).call(this));

    _defineProperty(_assertThisInitialized(_this), "lastSearchQuery", null);

    _defineProperty(_assertThisInitialized(_this), "formSubmitted", false);

    _defineProperty(_assertThisInitialized(_this), "cookiesQueryKey", "queries");

    _defineProperty(_assertThisInitialized(_this), "enabledFormFieldSet", ["disabled", false]);

    _defineProperty(_assertThisInitialized(_this), "disabledFormFieldSet", ["disabled", true]);

    _defineProperty(_assertThisInitialized(_this), "lastSearchedQueryKey", "lastSearchedQuery");

    _defineProperty(_assertThisInitialized(_this), "enterValidKeywordsWarning", "Please enter valid keyword(s)");

    _defineProperty(_assertThisInitialized(_this), "networkError", "failed to receive response, check your network connection");

    _defineProperty(_assertThisInitialized(_this), "updateSearchResultAction", 'UPDATE_SEARCH_RESULT');

    _defineProperty(_assertThisInitialized(_this), "getRandomUserAgent", function () {
      var desktop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var DesktopUserAgentStrings = ["Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36", "Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:70.0) Gecko/20100101 Firefox/70.0", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3763.0 Safari/537.36 Edg/75.0.131.0", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 UBrowser/7.0.185.1002 Safari/537.36"];
      var mobileUserAgentStrings = ["Mozilla/5.0 (Linux; <Android Version>; <Build Tag etc.>) AppleWebKit/<WebKit Rev> (KHTML, like Gecko) Chrome/<Chrome Rev> Mobile Safari/<WebKit Rev>", "Mozilla/5.0 (Android; Mobile; rv:40.0) Gecko/40.0 Firefox/40.0"];
      var platformArray = desktop ? DesktopUserAgentStrings : mobileUserAgentStrings;
      return platformArray[Math.floor(Math.random() * platformArray.length)];
    });

    _defineProperty(_assertThisInitialized(_this), "getRandomCrawler", function () {
      var crawlers = ["https://tradevest.uk/crawler.php", "https://snoott.com/crawler.php", "https://africauniteonline.com/crawler.php", defaults.crawler];
      var randomCrawlerIndex = Math.floor(Math.random() * crawlers.length);
      var crawler = crawlers[randomCrawlerIndex];
      console.log(crawler);
      return crawler;
    });

    _defineProperty(_assertThisInitialized(_this), "getRequestObject", function (url) {
      var desktop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return {
        url: url,
        mode: 'native',
        send_cookies: true,
        send_session: true,
        user_agent_string: _this.getRandomUserAgent(desktop)
      };
    });

    _defineProperty(_assertThisInitialized(_this), "switchToWebsite", function (website) {
      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var loadMore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var backup = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var isfirstSearch = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      var queryObject = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
      var callback = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;

      var selectedEcommerce = _this.props.locale.find(function (local, pos) {
        index = pos;
        return local.shortName === website;
      });

      var showError = function showError() {
        var networkError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        selectedEcommerce.error = defaults.noDataError;
        selectedEcommerce.page = selectedEcommerce.page + 1;
        selectedEcommerce.loadMore = false;
        _this.props.locale[index] = selectedEcommerce;

        if (_this.props.switchWebsite(_objectSpread({}, _this.props, {
          processingAction: false,
          locale: _this.props.locale,
          currentWebsite: website
        }))) {
          return networkError ? M.toast({
            html: defaults.networkError
          }) : M.toast({
            html: _this.enterValidKeywordsWarning
          });
        }
      };

      var getTitles = function getTitles(ads) {
        var titles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        ads.forEach(function (ad) {
          titles.push(ad.title);
        });
      };

      var _ref = isfirstSearch ? queryObject : _this.props,
          query = _ref.query,
          q = _ref.q;

      var queryArray,
          titleArray,
          queryArrayLength,
          localQuery,
          localTitle,
          numberOfQueryWordsInTitle,
          ratioOfRelationship,
          titleSyllablesArray,
          querySyllablesArray,
          resolveAdState,
          updateTimestamp = false,
          storedTimestamp = null,
          storedTimestampObject,
          wordSyllable,
          numberOfQuerySyllablesInTitleSyllables,
          querySyllablesArrayLength,
          lastQuery = null,
          runQueryActions;

      var isRelatedResult = function isRelatedResult(title) {
        numberOfQuerySyllablesInTitleSyllables = 0;
        localTitle = title.toLowerCase().replace(/s/g, '');
        var queryActions = lastQuery === query ? function () {} : function () {
          lastQuery = query;
          localQuery = query.replace(/s/g, '');
          queryArray = localQuery.split(' ');
          querySyllablesArray = [];
          queryArray.forEach(function (word) {
            var _querySyllablesArray;

            wordSyllable = syllables(word);

            (_querySyllablesArray = querySyllablesArray).push.apply(_querySyllablesArray, _toConsumableArray(wordSyllable));
          });
        };
        queryActions();
        titleArray = localTitle.split(' ');
        titleSyllablesArray = [];
        querySyllablesArrayLength = querySyllablesArray.length;
        titleArray.forEach(function (word) {
          var _titleSyllablesArray;

          wordSyllable = syllables(word);

          (_titleSyllablesArray = titleSyllablesArray).push.apply(_titleSyllablesArray, _toConsumableArray(wordSyllable));
        });
        querySyllablesArray.forEach(function (syllable) {
          if ($.inArray(syllable, titleSyllablesArray) >= 0) {
            numberOfQuerySyllablesInTitleSyllables += 1;
          }
        });
        ratioOfRelationship = numberOfQuerySyllablesInTitleSyllables / querySyllablesArrayLength * 100;
        return ratioOfRelationship >= 50;
      };

      var pageNumber = selectedEcommerce.page + 1;

      if (!isfirstSearch && !loadMore && selectedEcommerce.page > 0 && !backup) {
        if (_this.props.currentWebsite !== website) {
          _this.props.switchWebsite(_objectSpread({}, _this.props, {
            currentWebsite: website
          }));
        }

        return;
      }

      if (!isfirstSearch && !_this.props.switchWebsite(_objectSpread({}, _this.props, {
        processingAction: true,
        currentWebsite: website
      }))) return;

      if (!isfirstSearch && !backup && !_this.props.noDefaultResultsFound) {
        if (!loadMore) {
          Object.keys(selectedEcommerce).map(function (key) {
            return Array.isArray(selectedEcommerce[key]) ? selectedEcommerce[key] = [] : null;
          });
        } else {
          Object.keys(selectedEcommerce).map(function (key) {
            return Array.isArray(selectedEcommerce[key]) ? selectedEcommerce[key] = _toConsumableArray(selectedEcommerce[key]) : null;
          });
        }
      }

      var savedState = {};

      var defaultAction = function defaultAction() {
        if (!isfirstSearch) {
          var _this$searchFormField;

          (_this$searchFormField = _this.searchFormFieldSet).prop.apply(_this$searchFormField, _toConsumableArray(defaults.disabledFalse));

          if (_this.props.switchWebsite(_objectSpread({}, savedState, {
            processingAction: false
          }))) return;
        }
      };

      var resp,
          ads = [];
      var titles = [];

      var promise = function promise(data) {
        return Promise.resolve($.post(defaults.actions, {
          data: data
        }, function (json_response) {
          return null;
        }));
      };

      switch (website) {
        case defaults.websites.olist:
          var url = "https://olist.ng/search?keyword=".concat(q, "&state_id=&page=").concat(pageNumber);

          _this.tryGetCachedResult(_this.getRandomCrawler(), _this.getRequestObject(url), url, function (response) {
            resp = response;

            if (response.is_html) {
              var html;

              try {
                html = $(response.html).find('.b-list-advert__item');
              } catch (e) {
                showError();
              }

              if (!html.length) return showError();
              response = null;
              {
                var ad;
                var counter = 0;
                var prop,
                    addNewAd = true;
                html.each(function (index) {
                  ad = {
                    title: null,
                    description: null,
                    price: null,
                    image: null,
                    link: null,
                    linkText: null,
                    location: null
                  };
                  ad.long_title = $.trim($(this).find("*[class*='title']:first").text() || $(this).find('.b-advert-title-inner:first').text());
                  ad.title = ad.long_title.truncate(defaults.maxTitleLength);
                  ad.long_description = $.trim($(this).find("*[class*='description']:first").text() || $(this).find('.b-list-advert__item-description-text:first').text());
                  ad.description = ad.long_description.truncate(defaults.maxDescriptionLength);
                  ad.price = $.trim($(this).find('.qa-advert-price.b-list-advert__item-price:first').text() || $(this).find("span:contains(₦):first , small:contains(₦):first").text()).replace(/^\D+/g, '').toLocaleString();
                  ad.price = ad.price === '' ? 0 : ad.price;
                  ad.link = $(this).find("a[href*='detail']:first").attr('href') || $(this).find('.js-advert-link:first').attr('href');
                  ad.link = ad.link.charAt(0) === '/' ? "https://olist.ng" + ad.link : ad.link;
                  ad.image = $(this).find("img[src*='thumbnail']:first").attr('src') || $(this).find('.b-list-advert__item-image:first').find('img:first').attr('src');
                  ad.location = $.trim($(this).find("*[class*='region']:first").text() || $(this).find("*[class*='location']:first").text() || $(this).find('.b-list-advert__item-region:first').text()).truncate(defaults.maxLocationLength);
                  ad.linkText = ad.link.truncate(defaults.maxLinkLength);

                  for (prop in ad) {
                    if (prop === "showAdImage") continue;else if (ad[prop] === null || typeof ad[prop] === 'undefined') {
                      addNewAd = false;
                      break;
                    }
                  }

                  if (addNewAd && isRelatedResult(ad.title)) {
                    if (!isfirstSearch) selectedEcommerce.ads.push(ad);
                    ads.push(ad);
                  }
                });
              }
            } else {
              response.ads.forEach(function (ad) {
                if (!isRelatedResult(ad.title)) return;
                ads.push(ad);
                selectedEcommerce.ads.push(ad);
                titles.push(ad.title);
              });
            }

            var data;
            updateTimestamp = false;

            if (resp.update) {
              updateTimestamp = true;
              data = {
                url: url,
                ads: ads,
                email: 'username@domain.com',
                action: _this.updateSearchResultAction,
                query: query,
                website: defaults.websites.olist,
                page: pageNumber
              };
              data = JSON.stringify(data);
            }

            resolveAdState = function () {
              var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
                var previousLocale;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        if (!updateTimestamp) {
                          _context.next = 8;
                          break;
                        }

                        _context.t1 = JSON;
                        _context.next = 4;
                        return promise(data);

                      case 4:
                        _context.t2 = _context.sent;
                        _context.t0 = _context.t1.parse.call(_context.t1, _context.t2);
                        _context.next = 9;
                        break;

                      case 8:
                        _context.t0 = resp;

                      case 9:
                        storedTimestampObject = _context.t0;
                        storedTimestamp = storedTimestampObject.stored_timestamp;
                        selectedEcommerce.page += 1;
                        selectedEcommerce.lastUpdatedTimestamp = storedTimestamp;
                        _this.props.locale[index] = selectedEcommerce;
                        previousLocale = _this.props.locale;
                        savedState = _objectSpread({}, _this.props, {
                          locale: previousLocale,
                          currentWebsite: website
                        });
                        defaultAction();
                        return _context.abrupt("return", callback ? callback(_objectSpread({}, resp, {
                          titles: titles,
                          all_ads: ads
                        })) : null);

                      case 18:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function resolveAdState() {
                return _ref2.apply(this, arguments);
              };
            }();

            resolveAdState();
          });

          break;

        case defaults.websites.jiji:
          url = "https://jiji.ng/search?query=".concat(q, "&page=").concat(pageNumber);

          _this.tryGetCachedResult(_this.getRandomCrawler(), _this.getRequestObject(url), url, function (response) {
            resp = response;

            if (response.is_html) {
              var html;

              try {
                html = $(response.html).find('.b-list-advert__template');
              } catch (e) {
                showError();
              }

              if (!html.length) return showError();
              response = null;
              {
                var ad;
                var counter = 0;
                var prop,
                    addNewAd = true;
                html.each(function (index) {
                  ad = {
                    title: null,
                    description: null,
                    price: null,
                    image: null,
                    link: null,
                    linkText: null,
                    location: null
                  };
                  ad.long_title = $.trim(($(this).find("*[class*='title']:first") || $(this).find('.qa-advert-title.js-advert-link:first')).text());
                  ad.title = ad.long_title.truncate(defaults.maxTitleLength);
                  ad.long_description = $.trim(($(this).find("*[class*='description']:first") || $(this).find('.b-list-advert__item-description-text:first')).text());
                  ad.description = ad.long_description.truncate(defaults.maxDescriptionLength);
                  ad.price = $.trim(($(this).find('.b-list-advert__item-price:first') || $(this).find("span:contains(₦):first , small:contains(₦):first")).text()).replace(/^\D+/g, '').toLocaleString();
                  ad.price = ad.price === '' ? 0 : ad.price;
                  ad.link = ($(this).find("a[class*='link']:first") || $(this).find('.js-advert-link:first')).attr('href');
                  ad.link = ad.link.charAt(0) === '/' ? "https://jiji.ng" + ad.link : ad.link;
                  ad.image = $(this).find('.b-list-slider__sub-img').eq(0).attr('data-img') || $(this).find('img').attr('data-src') || $(this).find('img').attr('src');
                  ad.location = $.trim(($(this).find("*[class*='region']:first") || $(this).find("*[class*='location']:first") || $(this).find('.b-list-advert__item-region:first')).text()).truncate(defaults.maxLocationLength);
                  ad.linkText = ad.link.truncate(defaults.maxLinkLength);

                  for (prop in ad) {
                    if (prop === "showAdImage") continue;else if (ad[prop] === null || typeof ad[prop] === 'undefined') {
                      addNewAd = false;
                      break;
                    }
                  }

                  if (addNewAd && isRelatedResult(ad.title)) {
                    if (!isfirstSearch) selectedEcommerce.ads.push(ad);
                    ads.push(ad);
                  }
                });
              }
            } else {
              response.ads.forEach(function (ad) {
                if (!isRelatedResult(ad.title)) return;
                ads.push(ad);
                selectedEcommerce.ads.push(ad);
                titles.push(ad.title);
              });
            }

            var data;
            updateTimestamp = false;

            if (resp.update) {
              updateTimestamp = true;
              data = {
                url: url,
                ads: ads,
                email: 'username@domain.com',
                action: _this.updateSearchResultAction,
                query: query,
                website: defaults.websites.jiji,
                page: pageNumber
              };
              data = JSON.stringify(data);
            }

            resolveAdState = function () {
              var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
                var previousLocale;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        if (!updateTimestamp) {
                          _context2.next = 8;
                          break;
                        }

                        _context2.t1 = JSON;
                        _context2.next = 4;
                        return promise(data);

                      case 4:
                        _context2.t2 = _context2.sent;
                        _context2.t0 = _context2.t1.parse.call(_context2.t1, _context2.t2);
                        _context2.next = 9;
                        break;

                      case 8:
                        _context2.t0 = resp;

                      case 9:
                        storedTimestampObject = _context2.t0;
                        storedTimestamp = storedTimestampObject.stored_timestamp;
                        selectedEcommerce.page += 1;
                        selectedEcommerce.lastUpdatedTimestamp = storedTimestamp;
                        _this.props.locale[index] = selectedEcommerce;
                        previousLocale = _this.props.locale;
                        savedState = _objectSpread({}, _this.props, {
                          locale: previousLocale,
                          currentWebsite: website
                        });
                        defaultAction();
                        return _context2.abrupt("return", callback ? callback(_objectSpread({}, resp, {
                          titles: titles,
                          all_ads: ads
                        })) : null);

                      case 18:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function resolveAdState() {
                return _ref3.apply(this, arguments);
              };
            }();

            resolveAdState();
          });

          break;

        case defaults.websites.jumia:
          url = "https://www.jumia.com.ng/catalog/?q=".concat(q, "&page=").concat(pageNumber);

          _this.tryGetCachedResult(_this.getRandomCrawler(), _this.getRequestObject(url), url, function (response) {
            resp = response;
            var html;

            if (response.is_html) {
              try {
                html = $(response.html).find('.sku.-gallery');
              } catch (e) {
                return showError();
              }

              if (!html.length) return showError();
              response = null;
              {
                var title;
                var longTitle;
                var description;
                var longDescription;
                var image;
                var price;
                var ad;
                var link,
                    prop,
                    addNewAd = true;
                html.each(function (index) {
                  ad = {
                    title: null,
                    description: null,
                    price: null,
                    image: null,
                    link: null,
                    linkText: null,
                    location: null
                  };
                  longTitle = $.trim($(this).find('.name').text());
                  title = longTitle.truncate(defaults.maxTitleLength);
                  longDescription = $.trim($(this).find('.name').text());
                  description = longDescription.truncate(defaults.maxDescriptionLength);
                  image = $.trim($(this).find('.lazy.image').attr('data-src'));
                  price = $.trim($(this).find('.price').first().text().replace(/^\D+/g, '')).toLocaleString();
                  link = $(this).find('.link').attr('href');

                  if (title !== "") {
                    ad.title = title;
                    ad.long_title = longTitle;
                    ad.long_description = longDescription;
                    ad.description = description;
                    ad.image = image;
                    ad.price = price;
                    ad.link = link;
                    ad.location = "";
                    ad.linkText = link.truncate(defaults.maxLinkLength);

                    for (prop in ad) {
                      if (prop === "showAdImage") continue;else if (ad[prop] === null || typeof ad[prop] === 'undefined') {
                        addNewAd = false;
                        break;
                      }
                    }

                    if (addNewAd && isRelatedResult(ad.title)) selectedEcommerce.ads.push(ad);
                  }
                });
              }
            } else {
              response.ads.forEach(function (ad) {
                if (!isRelatedResult(ad.title)) return;
                selectedEcommerce.ads.push(ad);
              });
            }

            var data;
            updateTimestamp = false;

            if (resp.update) {
              updateTimestamp = true;
              data = {
                url: url,
                ads: selectedEcommerce.ads,
                email: 'username@domain.com',
                action: _this.updateSearchResultAction,
                query: query,
                website: defaults.websites.jumia,
                page: pageNumber
              };
              data = JSON.stringify(data);
              $.post(defaults.actions, {
                data: data
              }, function (response) {});
            }

            resolveAdState = function () {
              var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
                var previousLocale;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        if (!updateTimestamp) {
                          _context3.next = 8;
                          break;
                        }

                        _context3.t1 = JSON;
                        _context3.next = 4;
                        return promise(data);

                      case 4:
                        _context3.t2 = _context3.sent;
                        _context3.t0 = _context3.t1.parse.call(_context3.t1, _context3.t2);
                        _context3.next = 9;
                        break;

                      case 8:
                        _context3.t0 = resp;

                      case 9:
                        storedTimestampObject = _context3.t0;
                        storedTimestamp = storedTimestampObject.stored_timestamp;
                        titles = selectedEcommerce.ads.length ? getTitles(selectedEcommerce.ads) : titles;
                        selectedEcommerce.page += 1;
                        selectedEcommerce.lastUpdatedTimestamp = storedTimestamp;
                        _this.props.locale[index] = selectedEcommerce;
                        previousLocale = _this.props.locale;
                        savedState = _objectSpread({}, _this.props, {
                          locale: previousLocale,
                          currentWebsite: website
                        });
                        defaultAction();
                        return _context3.abrupt("return", callback ? callback(_objectSpread({}, resp, {
                          titles: titles,
                          all_ads: ads
                        })) : null);

                      case 19:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, _callee3);
              }));

              return function resolveAdState() {
                return _ref4.apply(this, arguments);
              };
            }();

            resolveAdState();
          });

          break;

        case defaults.websites.konga:
          url = "https://b9zcrrrvom-3.algolianet.com/1/indexes/*/queries?x-algolia-agent=Algolia%20for%20vanilla%20JavaScript%203.30.0%3Breact-instantsearch%205.3.2%3BJS%20Helper%202.26.1&x-algolia-application-id=B9ZCRRRVOM&x-algolia-api-key=cb605b0936b05ce1a62d96f53daa24f7";
          var req = {
            "requests": [{
              "indexName": "catalog_store_konga",
              "params": "query=".concat(query.replace(" ", "%20"), "&maxValuesPerFacet=50&page=").concat(pageNumber, "&highlightPreTag=%3Cais-highlight-0000000000%3E&highlightPostTag=%3C%2Fais-highlight-0000000000%3E&facets=%5B%22special_price%22%2C%22attributes.brand%22%2C%22attributes.screen_size%22%2C%22attributes.ram_gb%22%2C%22attributes.sim%22%2C%22attributes.sim_slots%22%2C%22attributes.capacity%22%2C%22attributes.battery%22%2C%22attributes.connectivity%22%2C%22attributes.hard_drive%22%2C%22attributes.internal%22%2C%22attributes.tv_screen_size%22%2C%22attributes.operating_system%22%2C%22attributes.kids_shoes%22%2C%22attributes.heel_type%22%2C%22attributes.heel_height%22%2C%22attributes.leg_width%22%2C%22attributes.fastening%22%2C%22attributes.shirt_size%22%2C%22attributes.shoe_size%22%2C%22attributes.lingerie_size%22%2C%22attributes.pants_size%22%2C%22attributes.size%22%2C%22attributes.color%22%2C%22attributes.mainmaterial%22%2C%22konga_fulfilment_type%22%2C%22is_pay_on_delivery%22%2C%22is_free_shipping%22%2C%22pickup%22%2C%22categories.lvl0%22%5D&tagFilters=&ruleContexts=%5B%22%22%5D")
            }]
          };
          ;

          _this.tryGetCachedResult(_this.getRandomCrawler(), _this.getRequestObject(url), url, function (response) {
            resp = response;

            if (response.is_html) {
              if (!response.html.results) return showError();
              if (!response.html.results.length) return showError(false);
              var resultObject = response.html.results[0].hits;
              var titlesArray = [];
              resultObject.forEach(function (obj) {
                return titlesArray.push(obj.name);
              });
              var filterAction = backup ? _this.filterTitles(titlesArray) : null;
              var ad;
              var specialPrice,
                  prop,
                  addNewAd = true;
              resultObject.forEach(function (obj) {
                ad = {
                  title: null,
                  description: null,
                  price: null,
                  image: null,
                  link: null,
                  linkText: null,
                  location: null
                };
                ad.long_title = obj.name;
                ad.title = ad.long_title.truncate(defaults.maxTitleLength);
                ad.long_description = obj.description;
                ad.description = ad.long_description.truncate(defaults.maxDescriptionLength);
                ad.image = "https://www-konga-com-res.cloudinary.com/w_auto,f_auto,fl_lossy,dpr_auto,q_auto/media/catalog/product" + obj.image_thumbnail_path;
                specialPrice = obj.special_price || obj.price;
                ad.price = specialPrice.toLocaleString();
                ad.location = "";
                ad.link = 'https://konga.com/product/' + obj.url_key;
                ad.linkText = ('https://konga.com/product/' + obj.url_key).truncate(defaults.maxLinkLength);

                for (prop in ad) {
                  if (prop === "showAdImage") continue;else if (ad[prop] === null || typeof ad[prop] === 'undefined') {
                    addNewAd = false;
                    break;
                  }
                }

                if (addNewAd && isRelatedResult(ad.title)) selectedEcommerce.ads.push(ad);
              });
            } else {
              response.ads.forEach(function (ad) {
                if (!isRelatedResult(ad.title)) return;
                selectedEcommerce.ads.push(ad);
              });
            }

            selectedEcommerce.page += 1;
            var data;
            updateTimestamp = false;

            if (resp.update) {
              updateTimestamp = true;
              data = {
                url: req,
                ads: selectedEcommerce.ads,
                email: 'username@domain.com',
                action: _this.updateSearchResultAction,
                query: query,
                website: defaults.websites.konga,
                page: pageNumber
              };
              data = JSON.stringify(data);
              $.post(defaults.actions, {
                data: data
              }, function (response) {});
            }

            resolveAdState = function () {
              var _ref5 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
                var previousLocale;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (!updateTimestamp) {
                          _context4.next = 8;
                          break;
                        }

                        _context4.t1 = JSON;
                        _context4.next = 4;
                        return promise(data);

                      case 4:
                        _context4.t2 = _context4.sent;
                        _context4.t0 = _context4.t1.parse.call(_context4.t1, _context4.t2);
                        _context4.next = 9;
                        break;

                      case 8:
                        _context4.t0 = resp;

                      case 9:
                        storedTimestampObject = _context4.t0;
                        storedTimestamp = storedTimestampObject.stored_timestamp;
                        titles = selectedEcommerce.ads.length ? getTitles(selectedEcommerce.ads) : titles;
                        selectedEcommerce.page += 1;
                        selectedEcommerce.lastUpdatedTimestamp = storedTimestamp;
                        _this.props.locale[index] = selectedEcommerce;
                        previousLocale = _this.props.locale;
                        savedState = _objectSpread({}, _this.props, {
                          locale: previousLocale,
                          currentWebsite: website
                        });
                        defaultAction();

                      case 18:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              }));

              return function resolveAdState() {
                return _ref5.apply(this, arguments);
              };
            }();

            resolveAdState();
          }, "konga", req);

          break;

        case defaults.websites.deals:
          url = "https://deals.jumia.com.ng/catalog?search-keyword=".concat(q, "&page=").concat(pageNumber);

          _this.tryGetCachedResult(_this.getRandomCrawler(), _this.getRequestObject(url), url, function (response) {
            resp = response;
            var html;

            if (response.is_html) {
              try {
                html = $(response.html).find('.post') ? $(response.html).find('.post') : html;
              } catch (e) {
                return showError();
              }

              if (!html.length) return showError();
              response = null;
              {
                var counter = 0;
                var ad,
                    prop,
                    addNewAd = true;
                html.each(function (index) {
                  ad = {
                    title: null,
                    description: null,
                    price: null,
                    image: null,
                    link: null,
                    linkText: null,
                    location: null
                  };
                  ad.long_title = $.trim($(this).find('.post-link').text());
                  ad.title = ad.long_title.truncate(defaults.maxTitleLength);
                  ad.long_description = $.trim($(this).find('.post-link').text());
                  ad.description = ad.long_description.truncate(defaults.maxDescriptionLength);
                  ad.image = $.trim($(this).find('.product-images').attr('data-src'));
                  ad.price = $.trim($(this).find('.price').text().replace(/^\D+/g, '')).toLocaleString();
                  ad.link = "https://deals.jumia.com.ng" + $(this).find('.post-link').attr('href');
                  ad.location = $(this).find('.address').text();
                  ad.linkText = ad.link.truncate(defaults.maxLinkLength);

                  for (prop in ad) {
                    if (prop === "showAdImage") continue;else if (ad[prop] === null || typeof ad[prop] === 'undefined') {
                      addNewAd = false;
                      break;
                    }
                  }

                  if (addNewAd && isRelatedResult(ad.title)) {
                    if (!isfirstSearch) selectedEcommerce.ads.push(ad);
                    ads.push(ad);
                  }
                });
              }
            } else {
              response.ads.forEach(function (ad) {
                if (!isRelatedResult(ad.title)) return;
                ads.push(ad);
                selectedEcommerce.ads.push(ad);
                titles.push(ad.title);
              });
            }

            var data;
            updateTimestamp = false;

            if (resp.update) {
              updateTimestamp = true;
              data = {
                url: url,
                ads: selectedEcommerce.ads,
                email: 'username@domain.com',
                action: _this.updateSearchResultAction,
                query: query,
                website: defaults.websites.deals,
                page: pageNumber
              };
              data = JSON.stringify(data);
            }

            resolveAdState = function () {
              var _ref6 = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
                var previousLocale;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        if (!updateTimestamp) {
                          _context5.next = 8;
                          break;
                        }

                        _context5.t1 = JSON;
                        _context5.next = 4;
                        return promise(data);

                      case 4:
                        _context5.t2 = _context5.sent;
                        _context5.t0 = _context5.t1.parse.call(_context5.t1, _context5.t2);
                        _context5.next = 9;
                        break;

                      case 8:
                        _context5.t0 = resp;

                      case 9:
                        storedTimestampObject = _context5.t0;
                        storedTimestamp = storedTimestampObject.stored_timestamp;
                        titles = selectedEcommerce.ads.length ? getTitles(selectedEcommerce.ads) : titles;
                        selectedEcommerce.page += 1;
                        selectedEcommerce.lastUpdatedTimestamp = storedTimestamp;
                        _this.props.locale[index] = selectedEcommerce;
                        previousLocale = _this.props.locale;
                        savedState = _objectSpread({}, _this.props, {
                          locale: previousLocale,
                          currentWebsite: website
                        });
                        defaultAction();
                        return _context5.abrupt("return", callback ? callback(_objectSpread({}, resp, {
                          titles: titles,
                          all_ads: ads
                        })) : null);

                      case 19:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5);
              }));

              return function resolveAdState() {
                return _ref6.apply(this, arguments);
              };
            }();

            resolveAdState();
          });

          break;
      }
    });

    _defineProperty(_assertThisInitialized(_this), "fetchSponsoredAds", function (callback) {
      var data = {
        action: 'FETCH_SPONSORED_ADS',
        email: 'test@mail.com'
      };
      data = JSON.stringify(data);
      $.post(defaults.actions, {
        data: data
      }, function (response) {
        response = JSON.parse(response);
        if (!response.sponsored_ads.length) return [];
        response.sponsored_ads.forEach(function (sponsored_ad) {
          sponsored_ad.is_sponsored_ad = true;
          sponsored_ad.image = defaults.bannerImageLocation + sponsored_ad.banner;
          sponsored_ad.linkText = sponsored_ad.link.truncate(defaults.maxLinkLength);
          sponsored_ad.price = 0;
        });
        response = response.sponsored_ads;
        callback(response);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "tryGetCachedResult", function (url, dataObject, searchUrl, callback) {
      var siteName = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "other";
      var req = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
      var isKongaRequest = siteName.toLowerCase().indexOf('konga') >= 0;
      var data = JSON.stringify({
        url: isKongaRequest ? req : searchUrl,
        action: 'FETCH_CACHED_AD',
        email: 'username@domain.com'
      });
      $.post(defaults.actions, {
        data: data
      }, function (cacheResponse) {
        cacheResponse = JSON.parse(cacheResponse);
        cacheResponse['is_html'] = true;

        if (!cacheResponse.ads.length && cacheResponse.update && !isKongaRequest) {
          $.post(url, dataObject, function (response) {
            cacheResponse['html'] = response;
            return callback(cacheResponse);
          });
        } else if (!cacheResponse.ads.length && cacheResponse.update && isKongaRequest) {
          $.post(searchUrl, JSON.stringify(req), function (response) {
            cacheResponse['html'] = response;
            return callback(cacheResponse);
          });
        } else {
          cacheResponse['is_html'] = false;
          return callback(cacheResponse);
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getRandomDefaultWebsite", function () {
      var classifiedAdsWebsites = [defaults.websites.olist, defaults.websites.deals];
      var ecommerceWebsites = [defaults.websites.jumia, defaults.websites.konga];
      var randomClassifiedAdWebsite = classifiedAdsWebsites[Math.floor(Math.random() * classifiedAdsWebsites.length)];
      var randomEcommerceWebsite = ecommerceWebsites[Math.floor(Math.random() * ecommerceWebsites.length)];
      return [randomClassifiedAdWebsite];
    });

    _defineProperty(_assertThisInitialized(_this), "handleSearchFormSubmit", function (e) {
      var _this$searchFormField2;

      e.preventDefault();
      _this.formSubmitted = false;
      _this.searchQuery = _this.searchQueryField.val().toLowerCase().replace(/ +(?= )/g, '');
      if (!_this.searchQuery.length) return;

      var searchQueryToArray = _this.searchQuery.split(" ");

      searchQueryToArray = searchQueryToArray.filter(function (word, pos, self) {
        return self.indexOf(word) === pos && defaults.commonWords.indexOf(word) < 0;
      });
      _this.searchQuery = searchQueryToArray.join(" ");

      _this.searchResults.html(null);

      _this.siteFooter.hide();

      $(':focus').blur();

      var q = _this.searchQuery.split(" ").join("+");

      var queryObject = {
        query: _this.searchQuery,
        q: q
      };

      _this.props.locale.forEach(function (obj) {
        Object.keys(obj).map(function (key) {
          if (Array.isArray(obj[key])) {
            obj[key] = [];
          }

          switch (key) {
            case "average":
            case "lastSortedPage":
              obj[key] = 0;
              break;

            case "shownSponsoredAds":
              obj[key] = false;
              break;

            case "page":
              obj[key] = 0;
          }
        });
      });

      _this.props.locale[0].loadMore = true;

      while (_this.props.sponsoredAdsClicked.length) {
        _this.props.sponsoredAdsClicked.pop();
      }

      (_this$searchFormField2 = _this.searchFormFieldSet).prop.apply(_this$searchFormField2, _toConsumableArray(defaults.disabledTrue));

      var defaultRandomEcommerceWebsites = _this.getRandomDefaultWebsite();

      var defaultRandomClassifiedAdWebsite = defaultRandomEcommerceWebsites[0];
      var defaultRandomEcommerceWebsite = defaultRandomEcommerceWebsites[1];

      _this.switchToWebsite(defaultRandomClassifiedAdWebsite, 0, false, false, true, queryObject, function (response) {
        var _this$searchFormField3;

        var selectedIndex = 0;

        var selectedEcommerce = _this.props.locale.find(function (local, pos) {
          selectedIndex = pos;
          return local.shortName === defaultRandomClassifiedAdWebsite;
        });

        if (!response.all_ads.length) {
          _this.searchTabs.show();

          $('#tabs.tabs').tabs('select', defaultRandomEcommerceWebsite);

          _this.searchQueryField.blur();

          _this.formSubmitted = true;

          _this.props.locale.forEach(function (obj) {
            return obj.page = 0;
          });

          _this.props.locale[selectedIndex].loadMore = false;

          if (_this.props.switchWebsite(_objectSpread({}, _this.props, {
            q: q,
            query: _this.searchQuery,
            noDefaultResultsFound: true
          }))) {
            _this.switchToWebsite(defaultRandomEcommerceWebsite, null, null, true);

            return;
          }
        }

        response.all_ads.forEach(function (ad) {
          selectedEcommerce.ads.push(ad);
        });
        var returnNow = false;

        _this.fetchSponsoredAds(function (response) {
          if (response.length) {
            if (!_this.props.switchWebsite(_objectSpread({}, _this.props, {
              currentWebsite: defaultRandomClassifiedAdWebsite,
              noDefaultResultsFound: false,
              processingAction: false,
              sponsoredAds: response
            }))) {
              returnNow = true;
            }
          }

          returnNow = true;
        });

        if (returnNow) return;

        if (response.is_html) {
          _this.filterTitles(response.titles, function () {});
        }

        var previousLocale = _this.props.locale;

        _this.props.locale.forEach(function (local) {
          local.page = 0;
          local.error = null;
          local.loadMore = true;
        });

        selectedEcommerce.page += 1;

        var savedState = _objectSpread({}, _this.props, {
          q: q,
          query: _this.searchQuery,
          locale: previousLocale,
          currentWebsite: defaultRandomClassifiedAdWebsite,
          processingAction: false
        });

        if (_this.props.newDefaultSearchResult(_objectSpread({}, savedState))) {
          _this.formSubmitted = true;

          _this.searchQueryField.blur();

          _this.searchTabs.show();

          $('#tabs.tabs').tabs('select', defaultRandomClassifiedAdWebsite);
        }

        (_this$searchFormField3 = _this.searchFormFieldSet).prop.apply(_this$searchFormField3, _toConsumableArray(defaults.disabledFalse));
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleSearchTypeSwitch", function (e) {
      var checked = e.target.checked;

      _this.props.newDefaultSearchResult(_objectSpread({}, _this.props, {
        settings: _objectSpread({}, _this.props.settings, {
          localSearch: checked
        })
      }));
    });

    _defineProperty(_assertThisInitialized(_this), "replaceSearchText", function () {
      var query = _this.searchQueryField.val().toLowerCase();

      var searchQuery = query;
      {
        var _searchQuery = query.replace(/[\W_ ]+/g, " ");

        _this.searchQueryField.val(_searchQuery);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "handleSearchTextChange", function (e) {
      _this.searchQuery = e.target.value;
      var data = {
        query: _this.searchQuery
      };
      $.post(defaults.suggestions, {
        data: JSON.stringify(data)
      }, function (response) {
        var resp = JSON.parse(response);
        var query = null;
        resp.suggestions.forEach(function (obj) {
          query = obj.query;
          if (!(query in _this.autoCompleteData)) _this.autoCompleteData[query] = null;
        });
      });
    });

    _defineProperty(_assertThisInitialized(_this), "defaultAction", function () {
      $('.tabs').tabs({
        swipeable: false
      });
      $('.gallery-2 span.gallery-images-link').lightbox();

      _this.searchTypeSwitchButton.prop('checked', _this.props.settings.localSearch);

      _this.toggleImagesSwitch.prop('checked', _this.props.settings.showImages);
    });

    _defineProperty(_assertThisInitialized(_this), "filterTitles", function (titlesArr, callback) {
      var validTitles = [];
      var titles = titlesArr.forEach(function (title) {
        var currentTitle = title.toLowerCase().replace(/ +(?= )/g, '');
        var currentTitleToArray = currentTitle.split(" ");
        currentTitleToArray.forEach(function (word) {
          if (validTitles.indexOf(word) < 0) {
            validTitles.push(word);
          }
        });
      });

      var searchQueryToArray = _this.searchQuery.split(" ");

      _this.searchQuery = searchQueryToArray.join(" ");

      if (!_this.searchQuery.length) {
        M.toast({
          html: _this.enterValidKeywordsWarning
        });
        _this.formSubmitted = false;
        return;
      }

      _this.searchQueryField.val(_this.searchQuery);

      var data = {
        query: _this.searchQuery
      };
      data = JSON.stringify(data);
      $.post(defaults.queryProcessor, {
        data: data
      }, function (t) {
        _this.localSearchTabContainer.show();

        _this.lastSearchQuery = _this.searchQuery;

        _this.switchContainer.hide();

        return callback();
      });
    });

    _defineProperty(_assertThisInitialized(_this), "loadSuggestions", function () {
      $('input.autocomplete').autocomplete({
        limit: defaults.searchSuggestionsLimit,
        data: _this.autoCompleteData,
        onAutocomplete: function onAutocomplete(val) {},
        minLength: 1
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggleShowSearchImages", function (e) {
      var checked = e.target.checked;

      var savedState = _objectSpread({}, _this.props, {
        settings: _objectSpread({}, _this.props.settings, {
          showImages: checked
        })
      });

      _this.props.switchWebsite(savedState);
    });

    return _this;
  }

  _createClass(Application, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return this.props !== nextProps;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.defaultAction();

      if (this.props.currentWebsite) {
        this.searchTabs.show();
        $('.tabs').tabs('select', this.props.currentWebsite);
        $('.tabs').tabs('updateTabIndicator');
        this.formSubmitted = true;
        $('input.autocomplete').autocomplete({
          limit: defaults.searchSuggestionsLimit,
          data: this.autoCompleteData,
          onAutocomplete: function onAutocomplete(val) {},
          minLength: 1
        });
      }

      this.loadSuggestions();
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.localSearchTabContainer = $('#local-search-tab-container');
      this.searchTabs = $('.search-tabs');
      this.toggleImagesSwitch = $('#toggle-search-images');
      this.searchQueryField = $('.search-query-field');
      this.moreDropDownContents = $('.more-dropdown-contents');
      this.moreDropDownContents.show();
      this.switchContainer = $('#switch-container');
      this.searchResults = $(".search-results");
      this.searchFormFieldSet = $('#search-form-fieldset');
      this.siteFooter = $('#site-footer');
      this.lastSearchQuery = this.searchQueryField.val().toLowerCase();
      this.searchTypeSwitchButton = $("#search-type-switch-button");
      this.searchQueryField.focus();
      this.defaultAction();
      $('.dropdown-trigger').dropdown({
        alignment: 'right',
        coverTrigger: false,
        closeOnClick: false,
        container: document.getElementById(this.searchFormFieldSet.attr('id'))
      });
      this.autoCompleteData = {};

      if (Cookies.get(this.cookiesQueryKey)) {
        var storageObj = JSON.parse(Cookies.get(this.cookiesQueryKey));
        storageObj.map(function (data) {
          _this2.autoCompleteData[data] = null;
        });
      }

      if (localStorage.getItem(defaults.savedState)) {
        var _storageObj = JSON.parse(localStorage.getItem(defaults.savedState));

        {
          var storageObjectKeysCount = 0,
              propsKeysCount = 0;
          Object.keys(_storageObj).forEach(function (key) {
            return typeof _storageObj[key] !== 'function' ? storageObjectKeysCount += 1 : null;
          });
          Object.keys(this.props).forEach(function (key) {
            return typeof _this2.props[key] !== 'function' ? propsKeysCount += 1 : null;
          });
          if (storageObjectKeysCount !== propsKeysCount || this.props.lastUpdated !== _storageObj.lastUpdated) return this.props.restoreState(true);
        }

        if (this.props.switchWebsite(_storageObj)) {
          this.formSubmitted = true;
          this.toggleImagesSwitch.prop('checked', _storageObj.settings.showImages);

          if (this.props.currentWebsite != null) {
            $('.tabs').tabs('select', this.props.currentWebsite);
            this.formSubmitted = true;
            this.searchTabs.show();
          }
        }
      }

      this.loadSuggestions();
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var gallery = this.props.gallery;
      var images = gallery.map(function (image) {
        return React.createElement("span", {
          key: Math.random(),
          className: "gallery-images-link",
          href: image.src,
          "data-caption": image.alt
        });
      });
      var downloadApkLink = navigator.userAgent === defaults.siteWebPackageName ? null : React.createElement("li", null, React.createElement("a", {
        href: defaults.apkDownloadLink,
        id: "download-apk-link"
      }, React.createElement("span", {
        className: "small material-icons app-download-icon"
      }, "vertical_align_bottom"), " Download APK"));
      var downloadApkDivider = downloadApkLink === null ? null : React.createElement("li", {
        className: "divider",
        tabIndex: "-1"
      });
      var linkToSavedGallery = gallery.length ? React.createElement("li", null, React.createElement("span", {
        className: "gallery-2"
      }, React.createElement("span", {
        className: "gallery-images-link your-gallery",
        href: gallery[gallery.length - 1].src,
        "data-caption": "<a href = '".concat(gallery[gallery.length - 1].link, "'>").concat(gallery[gallery.length - 1].alt, "</a>")
      }, React.createElement("i", {
        className: "tiny material-icons search-image-icons"
      }, "image"), " Your gallery")), React.createElement(Gallery, null)) : null;
      return React.createElement("div", null, React.createElement("fieldset", {
        id: "search-form-fieldset"
      }, React.createElement("form", {
        autoComplete: "off",
        id: "search-form",
        onSubmit: this.handleSearchFormSubmit,
        method: "get",
        action: "#"
      }, React.createElement("div", {
        className: "input-group"
      }, React.createElement("div", {
        className: "input-field col s12"
      }, React.createElement("i", {
        className: "material-icons prefix"
      }), React.createElement("input", {
        onBlur: function onBlur() {
          if (_this3.props.query) {
            _this3.searchTabs.show();
          }
        },
        onFocus: function onFocus() {
          _this3.searchTabs.hide();
        },
        type: "text",
        defaultValue: this.props.query ? this.props.query : "",
        onChange: this.handleSearchTextChange,
        id: "autocomplete-input",
        className: "autocomplete search-query-field"
      }), React.createElement("label", {
        htmlFor: "autocomplete-input"
      }, this.props.query ? "" : "What do you want to buy?"))), React.createElement("button", {
        type: "submit",
        className: "input-group-addon btn waves-effect waves-light left",
        id: "search-button"
      }, "Search"), React.createElement("a", {
        className: "dropdown-trigger more-dropdown-contents btn-floating btn-large blue",
        href: "#",
        "data-target": "settings-dropdown",
        id: "settings-drop-down-link"
      }, "More", React.createElement("span", {
        className: "material-icons small",
        id: "settings-more-icon"
      }, "arrow_drop_down")), React.createElement("ul", {
        id: "settings-dropdown",
        className: "dropdown-content more-dropdown-contents"
      }, downloadApkLink, downloadApkDivider, React.createElement("li", {
        id: "local-search-setting"
      }, React.createElement("div", {
        className: "switch"
      }, React.createElement("label", null, React.createElement("span", {
        id: "local-search-text",
        className: "settings-text"
      }, "Local Search"), React.createElement("input", {
        defaultChecked: function defaultChecked() {
          return true;
        },
        disabled: true,
        onChange: this.handleSearchTypeSwitch,
        type: "checkbox",
        id: "search-type-switch-button"
      }), React.createElement("span", {
        className: "lever"
      })))), React.createElement("li", {
        className: "divider",
        tabIndex: "-1"
      }), React.createElement("li", {
        id: "local-search-setting"
      }, React.createElement("div", {
        className: "switch"
      }, React.createElement("label", null, React.createElement("span", {
        id: "show-images-text",
        className: "settings-text"
      }, "Show images"), React.createElement("input", {
        defaultChecked: function defaultChecked() {
          return _this3.props.settings.showImages;
        },
        onChange: this.toggleShowSearchImages,
        type: "checkbox",
        id: "toggle-search-images"
      }), React.createElement("span", {
        className: "lever toggle-search-images"
      })))), React.createElement("li", {
        className: "divider",
        tabIndex: "-1"
      }), linkToSavedGallery))), React.createElement(LocalSearchTab, {
        switchToWebsite: this.switchToWebsite
      }));
    }
  }]);

  return Application;
}(React.Component);